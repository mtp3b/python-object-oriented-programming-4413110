Object-Oriented Programming
 - python does not require you to use objects and classes
 - complex programs are hard to keep organized
 - object-oriented programming organizes and structures code
     1. groups together data and behavior into one place (reduces bugs and ensures only that the parts of the program that need access to that data have it)
     2. promotes modularization of programs (if parts of a program needs to be updated, it will present minimal disturbance to other parts of the code)
     3. isolates different parts of the program from each other (if a problem occurs in one part of the program, other parts of the program can continue to operate)



TERMINOLOGY:
CLASS - a blueprint or template that describes how to create a specific kind of object

METHODS - regular functions that are part of a class

ATTRIBUTES - variables that hold data that are part of a class

OBJECT - a specific instance of a class

INHERITANCE - means by which a class can inherit capabilities from one another

COMPOSITION - means of building complex objects out of other objects




CH1 NOTES:
 - adding ang underscore(_) in front of the attribute name tells other programmers that the attribute is internal to the class only and not for public consumption

 - "hasattr" is a built_in function used to check if an attribute exists

 - properties with double underscores are hidden by the interpreter. other classes will get an error if they try to access that attribute

 - "isinstace" is used to check if a given object is an instance of a particular class

 - every object is a subclass of the built-in 'object' class

 - class-level methods and attributes are shared at the class level across all instances of that class

 - define "class attributes" outside of any instance attributes. you can use all caps to indicate class-level attributes

 - "class methods" receive the class itself as the first argument
    ex. @classmethod  #classmethod decorator indicates that the method to be defined is a class method and not an instance method
        def get_book_types(cls):
          return cls.BOOK_TYPES

 - "static methods" do not modify the state of either the class or a specific object instance. static methods are not oftenly used

CH2 NOTES:

 - STARTING CH2, JUST COMPARE Start AND Finished CODE!!

 - super().__init__() initializes parent class from the child class

 - abstract base class is a template where other classes inherit from, albeit with some rules:
     1. consumers should not be able to create instances of the base class itself
     2. certain methods in the base class have to be implemented in the sub-classes

 - abc module for abstract base class

 - @abstractmethod decorator declares a method as abstract and requires a subclass to override and implement it

 - sub-classes can inherit properties from more than 1 base class

 - if both super-classes are defining the same attribute, the sub-class inherits the attribute of the super-class that is listed first from left to right

 - by implementing an interface, the class makes a contract/promise to provide a certain kind of behavior or capability

 - when using composition, we build objects out of other objects. this model is more of a "has" relationship rather than an "is" relationship like in inheritance


CH3 NOTES:
 - you can override built-in functions to make them behave the way you want to

 - __str__ function is user-friendly description of the object and usually intended to be displayed to the user

 - __repr__ function is used to generate a more developer-facing string and ideally used to re-create the object in its current state or for debugging

 - python does not do attribute by attribute comparison. it just sees 2 instances as 2 different objects in memory

 - __eq__ is being called when comparing objects for equality

 - the built-in 'sort' function uses the __lt__ operator to sort from lowest to highest

 - https://docs.python.org/3/reference/datamodel.html

 - python gives you complete control over how attributes are accessed

 - __getattr__ gets called when the called attribute is not defined

 - the __call__ method can be used to call the object like a function